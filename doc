pulling steps out of an existing pipe => point-free.




using the dot less. of course there's nothing wrong with the dot, but in some cases you can make
more abstract & powerful code by avoiding it.

the first question people ask is: what's wrong with the way I've been doing it?

; [ 1, 2, 3]
.map (double)
.join ('')

the second group asks, isn't this just what i've been doing with lodash / underscore?

_
.chain ([1, 2, 3])
.map (double)
.join ('')
.value ()

the main difference is that in using the above forms you are limited to the methods which are
available on the object (Array.prototype in the former case, the lodash/underscore object in the
second case).

by using free-standing functions you can mix and match any function in the namespace, which
increasees the flexibility enormously.

it also decouples the calling site from the implementation:

downloadStatus | show

could be defined as

DownloadStatus.prototype.show = function () {
    return this | cata ({
        DownloadInProgress: () => this.completed | ifOk (
            multiply (100) >> sprintf1 ('in progress: %.1f %%'),
            'in progress: (unknown)' | always,
        ) | brightRed,
        DownloadPending: () => 'ðŸ•‘' | yellow,
        DownloadCompleted: () => 'âœ”' | green,
        DownloadError: (err) => err | ifOk (
            'error: ' | concatTo,
            'error' | always,
        ) | red,
        DownloadAlreadyDone: () => 'âœ”' | blue | sprintf1 ('%s (already downloaded)'),
    })
    | padTo (50)
}
const show = dot ('sow')

but then the implementation could be changed, for example to the following, without the caller
having to change anything at the call site.

(this is not the best example -- 'completed' is also a param of the pattern match function)
export const show = deconstruct ((downloadStatus, { completed, }) =>
    downloadStatus | cata ({
        DownloadInProgress: () => completed | ifOk (
            multiply (100) >> sprintf1 ('in progress: %.1f %%'),
            'in progress: (unknown)' | always,
        ) | brightRed,
        DownloadPending: () => 'ðŸ•‘' | yellow,
        DownloadCompleted: () => 'âœ”' | green,
        DownloadError: (err) => err | ifOk (
            'error: ' | concatTo,
            'error' | always,
        ) | red,
        DownloadAlreadyDone: () => 'âœ”' | blue | sprintf1 ('%s (already downloaded)'),
    })
    | padTo (50)
)






three | laatsO ([
    double,
    triple,
], (three, six, nine) => three + six + nine)

three | laatsO ([
    double,
    triple,
    (three, six, nine) => three + six + nine,
])

// --- N to force you to remember []
three | laatsNO ([
    double,
    triple,
    (three, six, nine) => three + six + nine,
])

laats (
    _ => three,
    double,
    triple,
    (three, six, nine) => three + six + nine,
)

laats ([
    _ => three,
    double,
    triple,
    (three, six, nine) => three + six + nine,
])

three | O (_ => laats (
    double,
    triple,
    (three, six, nine) => three + six + nine,
))




laats (
    _ => getThree (),
    (three) => three | double,
    (three, six) => six | triple,
    (three, six, eighteen) => three + six + eighteen,
)
| log

laats (
    getThree,
    double,
    arg1 >> triple,
    list >> sum,
)
| log


/*
 * line 1 can be easily reduced.
 * line 2 can be reduced using transformation X.
 * if we wish to go further we can reduce line 3 using the `arg1` function.
 *     arg1 (a, b, c, ...) returns b
 * you can think of the argument list as a tuple and arg1 as a function which plucks index 1,
 * somewhat like `snd` in haskell.
 * line 4 can be reducedd using the `list` function, which converts its arguments into an array:
 *     list (a, b, c, ...) = [a, b, c, ...]
 * so
 *     list (three, six, eighteen) // -> [three, six, eighteen]
 * can be composed with ramda's sum function.
 */


If you can not remember whether to use `pass` or `apply`, think about it as an English sentence. The
word to the right of the stick is the verb and its arguments are the object(s) of the verb.
    f | passN ([arg1, arg2])
means *pass* arg1 and arg2 to the function f
    ; [arg1, arg1] | applyN (f)
means *apply* the function f to arg1 and arg2.




Converting statements / statement blocks to expressions. Used properly this can help increase
referential transparency & composability.


Should be called passTo and applyTo.
Then apply is an alias for applyTo
and pass is an alias for passTo
So backwards.



You're not limited to piping 'values' through functions. You might want to pipe arrays, objects or
even other functions through
some pipeline. We offer the power to be extremely flexible
about what is getting passed around and how, without having to remember an exponentially increasing
number of function names or consult the documentation each time.

We accomplish this using simple conventions and English grammar.





|, >>, and lodash flow

Choosing between | and >> can get tricky, especially in more advanced situations.

It's best to keep the standard cases in mind, such as:

const gop = data => data
| f1
| f2

The value at the top is your data. In the most usual cases it's a string, number, array, something
like that.

If you want to abstract away the data, you remove the first pipe and change the rest of the | to >>:

const gop =
   f1
>> f2

Haskell people should see the link with Haskell's dot operator, which is precisely our >> operator.

In many cases it can help to think of an expression like a | b | c as a faucet which is switched on
with water actively flowing through it, while a >> b >> c is just the empty pipes, waiting for
something to flow through it.

In more advanced cases, this is not the whole story.

Consider a function like ramda's `equals`.

    equals (3, 3) // true
    equals (3, 4) // false

This should make sense by now:

    const equalsThree = equals (3)
    equalsThree (3) // true
    equalsThree (4) // false

But in some idioms you will see this:

    const equalsThree = 3 | equals
    equalsThree (3) // true
    equalsThree (4) // false

`3 | equals` is a function and thus violates the tentative rule we stated above about pipe
expressions involving data which is already flowing.






module Main where

import Data.List (intercalate)
import Data.Char (toUpper)

main :: IO ()
main = print $ thing "allen"

thing :: String -> String
-- thing x = intercalate "." $ map toString $ map toUpper x where
thing = intercalate "." . map toString . map toUpper where
    toString = (: [])

const go = _ =>
    'allen'
    | thing
    | log

const { log, } = console
const thing = x => x
    | map (toUpper)
    | join ('.')
// const toUpper = x => x.toUpperCase ()
const toUpper = dot ('toUpperCase')

yes, we can map on a string, thanks to ramda.

// const toUpper = x => x.toUpperCase ()
const toUpper = dot ('toUpperCase')
const { log, } = console
const thing = map (toUpper)
           >> join ('.')
go ()

const processString = thing >> log
'allen' >> processString

// const toUpper = x => x.toUpperCase ()
const toUpper = dot ('toUpperCase')
const { log, } = console
const thing = map (toUpper)
           >> join ('.')

const processString = thing >> log

; 'allen' | processString







?- rectangle(6).
******
**  **
*    *
*    *
**  **
******
true.

?- rectangle(8).
********
***  ***
**    **
*      *
*      *
**    **
***  ***
********
true.

?- rectangle(10).
**********
****  ****
***    ***
**      **
*        *
*        *
**      **
***    ***
****  ****
**********



ampersand (reverse, toUpperCase) ('Stan') // => ['natS', 'STAN']
asterisk (reverse, toUpperCase) (['Stan', 'Lee']) // => ['natS', 'LEE']



Prelude CM CA DL System.Process System.Posix> [1, 3 .. 11]




You generally want to not put an object to the left of the stick.
e.g. to merge an object literal with an object which has a name, put the
named one to the left and rearrange To/From as necessary.




// --- example simple time. note that this is too big.
// explain refactor, also arg2 >> ampm
    return laats (
      _ => this.minutes - this.getTimezoneOffset (),
      (mm) => mm % 720,
      (_, mm) => mm | divMod (60),
      (_1, _2, [hh, mm]) => hh | cond ([
        0  | eq | guardA ([12, 'pm']),
        12 | lt | guardA ([hh, 'am']),
        otherwise | guardA ([hh, 'pm']),
      ]),
      (_1, _2, [_3, mm], [hh, ampm]) => [hh, mm, ampm] | sprintfN ('%d:%02d %s'),
    )
  }





const dateToMinutesX = (geth, getm) => laatsO ([
  dot (geth),
  dot (getm),
  (_, h, m) => h * 60 + m,
])

const dateToMinutesTZ   = dateToMinutesX ('getHours', 'getMinutes')
const dateToMinutesUTC  = dateToMinutesX ('getUTCHours', 'getUTCMinutes')




// functions with an On ending are aliased to a version without it:
// call = callOn
// bind = bindOn
//
// functions with To and From endings have no aliases.




// @todo need something like
// when (isTTY, stdin => ...)
// stdin | whenPredicate (isTTY, stdin => ...)
//
// doesn't work
// stdin.setRawMode | whenFunction (applyTo1 (bool))
// stdin.bindTry ('setRawMode') | whenFunction (applyTo1 (bool))
// --- this is horrible.
// bool => tap (stdin => 'setRawMode' | bindTry (stdin) | whenFunction (applyTo1 (bool))),
// @todo whenBind? whenCan?

