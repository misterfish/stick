{"version":3,"sources":["../index.js"],"names":[],"mappings":";;;;;;AAGA;;;;;;AAEA,IAAK,OAAO,OAAP,KAAmB,WAAnB,IAAkC,OAAO,GAAP,KAAe,WAAtD,EAAoE;AAClE,QAAM,IAAI,KAAJ,CAAU,wDAAV,CAAN;AACD,C,CAPD;;;;;AASA,SAAS,OAAT,CAAiB,EAAjB,EAAqB,OAArB,EAA8B;AAC5B,MAAM,QAAQ,WAAW,QAAQ,KAAnB,IAA4B,uBAAc,OAAd,CAA1C;;AAEA,MAAI,iBAAJ;;AAEA;AACA,MAAK,yCAAyC,IAAzC,CAA8C,MAAM,QAAN,EAA9C,CAAL,EAAuE;AACrE,eAAW,kBAAU,GAAV,EAAgB;AACzB,UAAK,CAAC,MAAM,GAAN,CAAU,GAAV,CAAN,EAAuB;AACrB,YAAM,SAAS,GAAG,IAAH,CAAQ,IAAR,EAAc,GAAd,CAAf;AACA,cAAM,GAAN,CAAW,GAAX,EAAgB,MAAhB;AACA,eAAO,MAAP;AACD;AACD,aAAO,MAAM,GAAN,CAAU,GAAV,CAAP;AACD,KAPD;AAQD;;AAED;AAXA,OAYK;AACH,iBAAW,oBAAW;AACpB,YAAK,CAAC,MAAM,GAAN,CAAW,SAAX,CAAN,EAA+B;AAC7B,cAAM,SAAS,GAAG,KAAH,CAAS,IAAT,EAAe,SAAf,CAAf;AACA,gBAAM,GAAN,CAAW,SAAX,EAAsB,MAAtB;AACA,iBAAO,MAAP;AACD;AACD,eAAO,MAAM,GAAN,CAAU,SAAV,CAAP;AACD,OAPD;AAQD;;AAED;AACA,MAAK,GAAG,IAAR,EAAe;AACb,aAAS,WAAT,GAAuB,GAAG,IAAH,GAAU,UAAjC;AACD;;AAED,SAAO,QAAP;AACD;;kBAEc,O","file":"index.js","sourcesContent":["/* An efficient memoizer for functions that only receive immutable arguments.\n * Ideal with Redux and similar environments.\n */\nimport TupleMap from 'tuplemap';\n\nif ( typeof WeakMap === 'undefined' || typeof Map === 'undefined' ) {\n  throw new Error('This lib requires an implementation of WeakMap and Map');\n}\n\nfunction memoize(fn, options) {\n  const cache = options && options.cache || new TupleMap( options );\n\n  let memoized;\n\n  // Memoizer for functions that accept a single argument\n  if ( /^\\[object (Weak|LRU|NamedTuple)?Map\\]$/.test(cache.toString()) ) {\n    memoized = function( arg ) {\n      if ( !cache.has(arg) ) {\n        const result = fn.call(this, arg);\n        cache.set( arg, result );\n        return result;\n      }\n      return cache.get(arg);\n    }\n  }\n\n  // Memoizer for functions that accept multiple arguments\n  else {\n    memoized = function() {\n      if ( !cache.has( arguments ) ) {\n        const result = fn.apply(this, arguments);\n        cache.set( arguments, result );\n        return result;\n      }\n      return cache.get(arguments);\n    }\n  }\n\n  // Give a meaningful displayName to the memoized function\n  if ( fn.name ) {\n    memoized.displayName = fn.name + 'Memoized';\n  }\n\n  return memoized;\n}\n\nexport default memoize;\n"]}