// 1)

const base64encode = s => Buffer.from (s).toString ('base64')
const makeAuthToken = (key, secret) => {
    const keye    = encodeURIComponent (key)
    const secrete = encodeURIComponent (secret)
    const str1 = keye + ':' + secrete
    return base64encode (str1)
}

// 2)

const toString = dot1 ('toString')
// const base64encode = compose (Buffer.from, toString ('base64'))
const base64encode = Buffer.from >> toString ('base64')

const makeAuthToken = (key, secret) => {
    // const [keye, secrete] = map (encodeURIComponent, [key, secret])
    const [keye, secrete] = [key, secret] | map (encodeURIComponent)
    const str1 = [keye, secrete] | sprintfN ('%s:%s')
    return str1 | base64encode
}

// 3)
//
// remove the intermediate keye secrete

const makeAuthToken = (key, secret) => {
    const str1 = [key, secret]
        | map (encodeURIComponent)
        | sprintfN ('%s:%s')
    return str1 | base64encode
}

// 4)
// extend pipe

const makeAuthToken = (key, secret) => {
    const str1 = [key, secret]
        | map (encodeURIComponent)
        | sprintfN ('%s:%s')
        | base64encode
    return str1
}

// 5)
// remove intermediate str1

const makeAuthToken = (key, secret) => {
    return [key, secret]
        | map (encodeURIComponent)
        | sprintfN ('%s:%s')
        | base64encode
}

// 6)
// remove return

const makeAuthToken = (key, secret) => [key, secret]
    | map (encodeURIComponent)
    | sprintfN ('%s:%s')
    | base64encode

// 7)
// one step further (don't recommend, but instructional)

// 'can we think of a function to take something inside round parentheses to
// square brackets'?
//

// sure, let's call it 'list'

const list = (...args) => args

list (1, 2, 3) // => [1, 2, 3]
list (x, y, z) // => [x, y, z]

const makeAuthToken = list // ...

// now change all pipes to compose symbols:

const makeAuthToken = list
    >> map (encodeURIComponent)
    >> sprintfN ('%s:%s')
    >> base64encode

// don't recommend because:
// 1) self-documenting
// 2) too much point-free can be confusing
// 3) too much point-free can lead to subtle bugs involving values which are
// evaluated too strictly
// 4) but point-free is bad-ass.
