import {                                                                         // ------ defaultTo.                                                  how-to-pass = jest.fn()
    curry, tap,                                                                                                                                            ..mock-implementation (x) -> [x, x, x]
    has, hasIn,                                                                  export const defaultTo = _recurry (2) (manual.defaultTo)              how-to-fail = jest.fn()
    gt as rGt, gte as rGte, lt as rLt, lte as rLte,                                                                                                        ..mock-implementation (e) -> 'failed: ' +
    flip,                                                                        // --- @deprecated                                                e.message
    subtract, add,                                                               export const defaultTo__ = (x, f) => x | defaultTo (f)                try-it = try-catch do
    divide,                                                                                                                                                how-to-pass
    join,                                                                        // ------ assoc.                                                          how-to-fail
    concat as rConcat,
} from 'ramda'                                                                   export const assocM = _recurry (3) (manual.assocM)                    test 'should fail' ->
                                                                                                                                                           fails
// --- canonical can take functions from both main and manual.                   // ------ append.                                                         |> try-it
// beware of circular dependencies -- be sure tests are up to date.                                                                                        |> expect-to-equal 'failed: a thing is not
// --- index and manual do not take from canonical, so in princple there shouldn export const appendFrom   = _recurry (2) (manual.appendFrom)       a thang'
't be any.                                                                       export const appendTo     = _recurry (2) (manual.appendTo)            test 'should succeed, and pass params' ->
                                                                                 export const appendFromM  = _recurry (2) (manual.appendFromM)             passes
import {                                                                         export const appendToM    = _recurry (2) (manual.appendToM)               |> try-it
    dot, dot1, dot2, dot3, dot4, dot5, dotN,                                                                                                               |> expect-to-equal [99 99 99]
    isFunction, appendFrom, appendToM,                                           // ------ prepend.
src/canonical.js                                                         <lang>                                                                    describe 'exceptions' ->
    }                                                                            export const prependTo    = _recurry (2) (manual.prependTo)           test 'exception' ->
    return good (successVal)                                                     export const prependFrom  = _recurry (2) (manual.prependFrom)             exception 'a' 'b' 'c'
}                                                                                export const prependFromM = _recurry (2) (manual.prependFromM)            |> expect-to-equal new Error ('a b c')
                                                                                 export const prependToM   = _recurry (2) (manual.prependToM)          test 'raise' ->
export const decorateException = (prefix) => (e) => {                                                                                                      (expect -> new Error 'bad news' |> raise).
    const msg = [prefix]                                                         // --- arrays or strings                                          to-throw 'bad news'
    whenOk (m => msg.push (m)) (e.message)                                       // --- ramda's concat does more type checking and also allows fan     test 'die' ->
    e.message = msg.join (' ')                                                   tasy land semigroups.                                                     (expect -> die 'really' 'bad' 'news').to-t
    return e                                                                     export const concatTo = _recurry (2) (manual.concatTo)            hrow 'really bad news'
}                                                                                                                                                      test 'decorate exception' ->
                                                                                 // @todo: alias precatTo/From                                             new Error 'file not found'
export const defaultTo = f => x => ok (x) ? x : f ()                             export const concatFrom = flip (rConcat)                                  |> decorate-exception 'bad news:'
export const assocM = prop => val => o => (o[prop] = val, o)                                                                                               |> expect-to-equal new Error 'bad news: fi
                                                                                 // [] -> [] -> [], mut                                            le not found'
export const appendFrom = elem => ary => [...ary, elem]                          export const concatToM = curry (                                      test 'all' ->
export const appendTo   = ary => elem => [...ary, elem]                              (tgt, src) => {                                                       (expect ->
                                                                                         tgt.push (...src)                                                     'file not found'
export const appendToM    = (tgt) => (src) => (tgt.push (src), tgt)                      return tgt                                                            |> exception
export const appendFromM  = (src) => (tgt) => (tgt.push (src), tgt)                  }                                                                         |> decorate-exception 'bad news:'
export const prependTo    = ary => elem => [elem, ...ary]                        )                                                                             |> raise
export const prependFrom  = elem => ary => [elem, ...ary]                                                                                                  ).to-throw 'bad news: file not found'
export const prependFromM = src => tgt => (tgt.unshift (src), tgt)               export const concatFromM = flip (concatToM)
export const prependToM   = tgt => src => (tgt.unshift (src), tgt)
                                                                                 export const mergeTo = rMerge
export const concatTo = tgt => src => src.concat (tgt)                           export const mergeFrom = flip (rMerge)

                                                                                 // --- own properties, including null/undefined.
export default {                                                                 // --- 2x faster than Object.assign.

